set nocompatible
filetype off

" set the runtime path to include Vundle and initialize
set rtp+=$DOTFILES/vim/bundle/Vundle.vim

let mapleader=","

call vundle#rc("$DOTFILES/vim/bundle")
call vundle#begin()
" Plugins
Plugin 'VundleVim/Vundle.vim'
Plugin 'kien/ctrlp.vim' " fuzzy find files
Plugin 'scrooloose/nerdtree' " file drawer, open with :NERDTreeToggle
Plugin 'Xuyuanp/nerdtree-git-plugin' " Git status in nerdtree
Plugin 'scrooloose/nerdcommenter' " Comment lines
Plugin 'tpope/vim-fugitive' " the ultimate git helper
Plugin 'sjl/badwolf' " Colorscheme
Plugin 'airblade/vim-gitgutter' " Git changes

if $CONFIG_DOT_COC == 'YES'
        Plugin 'neoclide/coc.nvim' " Language Completion Protocol
endif

if $CONFIG_DOT_NERD == 'YES'
        Plugin 'ryanoasis/vim-devicons' " allow Nerdfont Icons
        Plugin 'tiagofumo/vim-nerdtree-syntax-highlight' " Pretty Icons
endif

call vundle#end()

" Syntax Highlighting
colorscheme badwolf
syntax enable

" Start Nerdtree if no other file is open
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Sync open file with Nerdtree
function! IsNERDTreeOpen()
        return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
endfunction

function! SyncTree()
        if &modifiable && IsNERDTreeOpen() && strlen(expand('%')) > 0 && !&diff
                NERDTreeFind
                wincmd p
        endif
endfunction

" Highlight Currently open buffer in NERDTree
autocmd BufEnter * call SyncTree()

nnoremap <C-n> :NERDTreeToggle<Return>

" NerdCommentor
filetype plugin on

let g:NERDSpaceDelims = 1
let g:NERDCommentEmptyLines = 1

" C-_ means Control + / for some reason
vmap <C-_> <plug>NERDCommenterToggle
nmap <C-_> <plug>NERDCommenterToggle

" GitGutter
let g:gitgutter_preview_win_floating = 1

nmap hf :GitGutterFold<CR>

highlight GitGutterAdd    guifg=#009900 ctermfg=2
highlight GitGutterChange guifg=#bbbb00 ctermfg=3
highlight GitGutterDelete guifg=#ff2222 ctermfg=1

" Nerdtree Git Plugin
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "~",
    \ "Staged"    : "+",
    \ "Untracked" : "*",
    \ "Renamed"   : "→",
    \ "Unmerged"  : "=",
    \ "Deleted"   : "X",
    \ "Dirty"     : "≈",
    \ "Clean"     : "√",
    \ 'Ignored'   : '≡',
    \ "Unknown"   : "?"
    \ }

" coc.nvim
if $CONFIG_DOT_COC == 'YES'
        " COC config
        let g:coc_global_extensions = [
                \ 'coc-snippets',
                \ 'coc-pairs',
                \ 'coc-python',
                \ 'coc-ccls',
                \ 'coc-json']
        set hidden
        set updatetime=300

        set shortmess+=c

        inoremap <silent><expr> <TAB>
                \ pumvisible() ? "\<C-n" :
                \ <SID>check_back_space() ? "\<TAB>" :
                \ coc#refresh()
        inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

        function! s:check_back_space() abort
                let col = col('.') - 1
                return !col || getline('.')[col - 1] =~# '\s'
        endfunction

        " Use <c-space> to trigger completion
        inoremap <silent><expr> <c-space> coc#refresh()

        " Use <cr> to confirm completion, `<C-g>u` means break undu chain at current position.
        " Coc only does snippet and additional edit on confrim.
        inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

endif

" ctrlp
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

" Enable vim auto settings on the first/last line see :help auto-setting
set modeline

" Tab Settings
set smarttab
set cindent
set tabstop=6
set softtabstop=4
set expandtab

" Window Splitting
nnoremap \| <C-w>v
nnoremap _ <C-w>s
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <S-h> <C-w>>
nnoremap <S-j> <C-w>-
nnoremap <S-k> <C-w>+
nnoremap <S-l> <C-w><

" UI Config
set number
nnoremap <C-c> :set invnumber<CR>
set showcmd
set cursorline
filetype indent on
set wildmenu
set lazyredraw
set showmatch

" Searching
set incsearch
set hlsearch
nnoremap <leader><space> :nohlsearch<CR>

"Folding
set foldenable
set foldlevelstart=10
set foldnestmax=10
nnoremap <space> za
set foldmethod=indent

"Movement
"move vertically by visual line
nnoremap j gj
nnoremap k gk
"Move the the beginning/end of line
nnoremap B ^
nnoremap E $
nnoremap $ <nop>
nnoremap ^ <nop>
" highlight last inserted text
nnoremap gV `[v`]

"Leader Shortcuts
" inoremap jk <esc>
" toggle gundo
" nnoremap <leader>u :GundoToggle<CR>
" edit vimrc/zshrc and load vimrc bindings
nnoremap <leader>ev :vsp ~/.vimrc<CR>
nnoremap <leader>ez :vsp ~/.zshrc<CR>
" open ag.vim
" nnoremap <leader>a :Ag

"CtrlP Settings
"let g:ctrlp_match_window = 'bottom,order:ttb'
"let g:ctrlp_switch_buffer = 0
"let g:ctrlp_working_path_mode = 0
"let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'

"Backups
set backup
set backupdir=~/.vim-tmp,~/.tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup

" AutoGroup
augroup configgroup
    autocmd!
    autocmd VimEnter * highlight clear SignColumn
    autocmd BufWritePre *.php,*.py,*.js,*.txt,*.hs,*.java,*.md %s/\s\+$//e
                " \:call <SID>StripTrailingWhitespaces()
    autocmd FileType java setlocal noexpandtab
    autocmd FileType java setlocal list
    autocmd FileType java setlocal listchars=tab:+\ ,eol:-
    autocmd FileType java setlocal formatprg=par\ -w80\ -T4
    autocmd FileType php setlocal expandtab
    autocmd FileType php setlocal list
    autocmd FileType php setlocal listchars=tab:+\ ,eol:-
    autocmd FileType php setlocal formatprg=par\ -w80\ -T4
    autocmd FileType ruby setlocal tabstop=2
    autocmd FileType ruby setlocal shiftwidth=2
    autocmd FileType ruby setlocal softtabstop=2
    autocmd FileType ruby setlocal commentstring=#\ %s
    autocmd FileType python setlocal commentstring=#\ %s
    autocmd BufEnter *.cls setlocal filetype=java
    autocmd BufEnter *.zsh-theme setlocal filetype=zsh
    autocmd BufEnter Makefile setlocal noexpandtab
    autocmd BufEnter *.sh setlocal tabstop=2
    autocmd BufEnter *.sh setlocal shiftwidth=2
    autocmd BufEnter *.sh setlocal softtabstop=2
augroup END
